<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.cleartext.esm.views.common.*"
	clipContent="false"
	creationComplete="isTypingIcon.visible=false"
	xmlns:s="library://ns.adobe.com/flex/spark">
	<mx:Script>
		<![CDATA[
			import com.cleartext.esm.models.valueObjects.IBuddy;
			import com.cleartext.esm.models.ApplicationModel;
			import com.cleartext.esm.events.InputTextEvent;
			import mx.utils.StringUtil;
			import com.cleartext.esm.assets.Constants;
			import com.cleartext.esm.models.utils.LinkResult;
			import com.cleartext.esm.models.utils.LinkUitls;
			import com.cleartext.esm.models.valueObjects.UrlShortener;
			import com.cleartext.esm.models.DatabaseModel;
			import com.cleartext.esm.models.SettingsModel;
			import com.cleartext.esm.models.BuddyModel;
			import mx.events.FlexEvent;
			import com.cleartext.esm.events.SendButtonEvent;
			import com.cleartext.esm.events.CustomStatusEvent;
			import com.cleartext.esm.models.valueObjects.Status;
			import com.cleartext.esm.models.valueObjects.Message;
			import com.cleartext.esm.models.XMPPModel;
			import com.cleartext.esm.models.valueObjects.Buddy;
			
			public var messageCanvas:MessageCanvas;
			
			private static const CORNER_RADIUS:Number = 5;
			
			[Bindable]
			public var buddy:IBuddy;
			
			[Bindable]
			public var shortening:Boolean = false;
			
			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			[Autowire]
			[Bindable]
			public var settings:SettingsModel;
			
			[Autowire]
			[Bindable]
			public var database:DatabaseModel;
			
			private function input_keyDownHandler(event:KeyboardEvent):void
			{ 	
				if(event.keyCode==Keyboard.ENTER)
				{
					if(event.altKey)
					{
						var startStr:String = inputTextArea.text.substr(0, inputTextArea.selectionBeginIndex);
						var endStr:String = inputTextArea.text.substr(inputTextArea.selectionEndIndex);
						inputTextArea.text = startStr + "\n" + endStr;
						inputTextArea.setSelection(inputTextArea.selectionBeginIndex + 1, inputTextArea.selectionBeginIndex + 1);
					}
					else
						send();
				}
			}
			
			[Mediate(event="SendButtonEvent.SEND_CLICKED")]
			public function send(event:SendButtonEvent=null):void
			{
				var trimedText:String = StringUtil.trim(inputTextArea.text);
				if(trimedText.length != 0 && buddy)
					appModel.sendMessageTo(buddy, trimedText);

				callLater(function():void{inputTextArea.text = ""});
			}
			
			[Mediate(event="InputTextEvent.INSERT_TEXT")]
			public function insertText(event:InputTextEvent):void
			{
				if(xmpp.connected)
				{
					inputTextArea.text = event.text;
					shorten();
					callLater(inputTextArea.setFocus);
				}
			}
			
			private function shorten(str:String=" "):void
			{
				if(!buddy || !buddy.isMicroBlogging || !shortenUrls.selected || shortening || (str.length==1 && str != " "))
					return;
					
				var results:Array = LinkUitls.findLinks(inputTextArea.text + str);
				for each(var lr:LinkResult in results)
				{
					if(!UrlShortener.alreadyShortenend(lr.validLink))
					{
						shortening = true;
						var shortener:UrlShortener = new UrlShortener();
						shortener.shorten(lr.validLink, settings.global.urlShortener, 
							function(shortURL:String, error:Boolean=false):void
							{
								if(!shortening)
									return;
	
								shortening = false;
								
								if(!error)
								{
	 								inputTextArea.text = inputTextArea.text.substr(0, lr.index) + shortURL + inputTextArea.text.substr(lr.index + lr.originalLink.length);
									var lengthChange:int = shortURL.length - lr.originalLink.length;
									inputTextArea.setSelection(inputTextArea.selectionBeginIndex+lengthChange, inputTextArea.selectionEndIndex+lengthChange);
								}
								
								shorten();
							});
						return;
					}
				}
			}
			
			private function shortenURLsClickHandler():void
			{
				settings.global.autoShortenUrls = shortenUrls.selected;
				database.saveGlobalSettings();
				
				if(shortenUrls.selected)
					shorten();
				else
					// cancel any shortening that has started
					shortening = false;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var g:Graphics = graphics;
				
				g.clear();
				
				g.beginFill(0xffffff);
				g.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, CORNER_RADIUS, CORNER_RADIUS);
				
				g.beginFill(0xebebeb);
				g.drawRoundRect(0, 0, unscaledWidth, Constants.TOP_ROW_HEIGHT, CORNER_RADIUS, CORNER_RADIUS);
				
				g.beginFill(0xffffff);
				g.drawRect(0, Constants.TOP_ROW_HEIGHT/2, unscaledWidth, Constants.TOP_ROW_HEIGHT/2);
				
				g.endFill();

				g.lineStyle(1, 0xefebe8);
				g.moveTo(0, Constants.TOP_ROW_HEIGHT);
				g.lineTo(unscaledWidth, Constants.TOP_ROW_HEIGHT);
				
				g.lineStyle(1, 0xffffff);
				g.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, CORNER_RADIUS, CORNER_RADIUS);
			}
			
		]]>
	</mx:Script>
	
	<common:StatusIcon
		visible="{!(buddy == Buddy.ALL_MICRO_BLOGGING_BUDDY || buddy.isTyping)}"
		statusString="{buddy.status.value}" 
		x="10" y="6"/>
	
	<mx:Image 
		id="isTypingIcon"
		source="{Constants.IsTyping}" 
		x="10" y="6" 
		visible="{buddy.isTyping}"/>
	
	<mx:Label 
		text="{buddy.nickname}" 
		x="{buddy == Buddy.ALL_MICRO_BLOGGING_BUDDY ? 10 : 28}" y="6"
		width="100%"
		styleName="blackBold"/>
	
	<mx:Label
		text="shortening.." 
		right="266" y="6"
		styleName="dGreyNormal" 
		visible="{shortening}"/>

	<mx:VRule right="258" height="17" y="4" visible="{buddy.isMicroBlogging}"/>

	<s:CheckBox 
		label="auto-shorten urls" 
		id="shortenUrls" 
		y="3" right="130"
		selected="{settings.global.autoShortenUrls}"
		click="shortenURLsClickHandler()"
		visible="{buddy.isMicroBlogging}"/>
		
	<mx:VRule right="122" height="17" y="4" visible="{buddy.isMicroBlogging}"/>		

	<mx:Label
		text="{inputTextArea.text.length + ' Characters'}" 
		right="10" y="6" 
		styleName="{(inputTextArea.text.length > 140) ? 'redBold' : 'dGreyNormal'}" 
		visible="{buddy.isMicroBlogging}"/>

	<common:DefaultTextInput
		id="inputTextArea"
		defaultText="Type message here..."
		width="100%" bottom="0" top="{Constants.TOP_ROW_HEIGHT}" 
		enabled="{!(!buddy || !xmpp.connected)}"
		keyDown="input_keyDownHandler(event)"
		focusRoundedCorners="bl br" 
		textInput="shorten(event.text)" 
		paddingRight="20"
		paddingLeft="10"
		paddingBottom="3"
		paddingTop="3"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		wordWrap="true"
		borderStyle="none"
		focusAlpha="0.5"
		color="0x000000"
		/>

</mx:Canvas>
