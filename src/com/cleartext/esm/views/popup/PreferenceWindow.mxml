<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:popup="com.cleartext.esm.views.popup.*"
	xmlns:common="com.cleartext.esm.views.common.*" 
	width="500" height="100%"
	submitButtonLabel="Save"
	isValid="true"
	>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.SHA1;
			import com.cleartext.esm.events.PopUpEvent;
			import com.cleartext.esm.events.UserAccountEvent;
			import com.cleartext.esm.models.ApplicationModel;
			import com.cleartext.esm.models.AvatarModel;
			import com.cleartext.esm.models.ContactModel;
			import com.cleartext.esm.models.DatabaseModel;
			import com.cleartext.esm.models.SettingsModel;
			import com.cleartext.esm.models.XMPPModel;
			import com.cleartext.esm.models.valueObjects.Status;
			import com.cleartext.esm.models.valueObjects.UrlShortener;
			import com.cleartext.esm.models.valueObjects.UserAccount;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.utils.ObjectUtil;
			
			import org.swizframework.Swiz;
			
			private static const TEXT_INPUT_WIDTH:Number = 160;
			
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			[Autowire]
			[Bindable]
			public var settings:SettingsModel;
			
			[Autowire]
			[Bindable]
			public var database:DatabaseModel;
			
			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var buddies:ContactModel;
			
			[Autowire]
			public var avatarModel:AvatarModel;
			
			override protected function init(event:Event):void
			{
				super.init(event);
				
				// set global values
				autoConnectCheckBox.selected = settings.global.autoConnect;
				urlShortenComboBox.selectedItem = settings.global.urlShortener;
				animateBuddyListCheckBox.selected = settings.global.animateBuddyList;
				animateMessageListCheckBox.selected = settings.global.animateMessageList;
				showOfflineBuddiesCheckBox.selected = settings.global.showOfflineBuddies;
				numTimelineMessages.value = settings.global.numTimelineMessages;
				numChatMessages.value = settings.global.numChatMessages;
				messageSortComboBox.selectedItem = (settings.global.sortBySentDate) ? "date sent" : "date received";
				awayTimeout.value = settings.global.awayTimeout;
				playSoundsCheckBox.selected = settings.global.playSounds;
//				checkUrlsCheckBox.selected = settings.global.checkUrls;
				
				// load user account
				nickname.text = settings.userAccount.nickname;
				avatarInput.avatar = avatarModel.userAccountAvatar;
				jid.text = settings.userAccount.jid;
				password.text = settings.userAccount.password;
				server.text = settings.userAccount.server;
				port.text = settings.userAccount.port.toString();
				
				title = "User Preferences - " + appModel.currentVersion;
			}
		
			override protected function submit(event:Event):void
			{
				if(closing)
					return;

				// commit global values
				settings.global.autoConnect = autoConnectCheckBox.selected;
				settings.global.urlShortener = urlShortenComboBox.selectedItem as String;
				settings.global.animateBuddyList = animateBuddyListCheckBox.selected;
				settings.global.animateMessageList = animateMessageListCheckBox.selected;
				settings.global.showOfflineBuddies = showOfflineBuddiesCheckBox.selected;
				settings.global.numTimelineMessages = numTimelineMessages.value;
				settings.global.numChatMessages = numChatMessages.value;
				settings.global.sortBySentDate = (messageSortComboBox.selectedItem == "date sent");
				settings.global.awayTimeout = awayTimeout.value;
				settings.global.playSounds = playSoundsCheckBox.selected;
//				settings.global.checkUrls = checkUrlsCheckBox.selected;
				
				settings.userAccount.nickname = nickname.text;
				settings.userAccount.jid = jid.text;
				settings.userAccount.password = password.text;
				settings.userAccount.server = server.text;
				var p:uint = new uint(port.text);
				if(p==0)
					p = 5222;
				settings.userAccount.port = p;
				
				if(avatarInput.bitmapData)
				{
					avatarModel.userAccountAvatar.bitmapData = avatarInput.bitmapData;
					avatarModel.userAccountAvatar.urlOrHash = SHA1.hashBytes(avatarInput.bitmapData.getPixels(avatarInput.bitmapData.rect));
					avatarModel.userAccountAvatar.displayName = nickname.text;
				}
				
				database.saveAvatar(avatarModel.userAccountAvatar);
				database.saveUserAccount(settings.userAccount);
				
				appModel.setUserTimeout();
				database.saveGlobalSettings();

				buddies.refresh();
				closeWindow();
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(AvatarModel.AVATAR_SIZE, AvatarModel.AVATAR_SIZE);
									var scale:Number = AvatarModel.AVATAR_SIZE / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (AvatarModel.AVATAR_SIZE - loadedBitmap.width * scale)/2;
									var ty:Number = (AvatarModel.AVATAR_SIZE - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									avatarInput.bitmapData = newBitmapData;
								});
						});
					validateForm();
				}
				catch (error:Error)
				{
					appModel.log(error);
				}
			}
			
			override protected function validateForm():void
			{
				isValid = nickname.text && jid.text && password.text && server.text;
			}
			
			[Mediate(event="UserAccountEvent.PASSWORD_CHANGE")]
			public function changePasswordHandler(event:UserAccountEvent):void
			{
				password.text = event.newPassword;
			}
			
			
		]]>
	</fx:Script>
	
	<s:TabBar id="tabBar" dataProvider="{tabs}" y="10" x="20" click="hideErrors()"/>
	
	<s:Line xFrom="0" xTo="{width-2}" yFrom="{tabBar.height + 10}" yTo="{tabBar.height + 10}">
		<s:stroke>
			<s:SolidColorStroke color="0x000000" weight="1" caps="square"/>
		</s:stroke>
	</s:Line>	

	<mx:ViewStack id="tabs" creationPolicy="all" width="460" height="250" y="60" x="20">
		
		<mx:Canvas label="Account Settings">
			<mx:Form horizontalCenter="0">
				<mx:FormItem label="Nickname:">
					<mx:VBox>
						<mx:TextInput id="nickname" width="{TEXT_INPUT_WIDTH}"
									  focusOut="validateInput(event, 'nickname can not be empty')" 
									  change="validateInput(event, 'nickname can not be empty');"/>
					</mx:VBox>
				</mx:FormItem>
				<mx:FormItem label="Profile picture:" direction="horizontal">
					<common:AvatarRenderer id="avatarInput" width="{AvatarModel.AVATAR_SIZE}" height="{AvatarModel.AVATAR_SIZE}" editMode="true" editClicked="changeAvatar()" />
				</mx:FormItem>
				
				<mx:FormItem label="Account id:">
					<mx:VBox>
						<mx:TextInput id="jid" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" change="validateInput(event, 'jid can not be empty');" focusOut="validateInput(event, 'jid can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
					</mx:VBox>
				</mx:FormItem>
				<mx:FormItem label="Password:">
					<mx:HBox >
						<mx:VBox>
							<mx:TextInput id="password" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" displayAsPassword="true" change="validateInput(event, 'password can not be empty');" focusOut="validateInput(event, 'password can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
						</mx:VBox>
						<mx:Button enabled="{xmpp.connected}" 
								   label="change..." 
								   click="Swiz.dispatchEvent(new PopUpEvent(PopUpEvent.CHANGE_PASSWORD_WINDOW));"
								   toolTip="{xmpp.connected ? '' : 'go online to change your password on the server'}"/>
					</mx:HBox>
				</mx:FormItem>
				<mx:FormItem label="Server:">
					<mx:VBox>
						<mx:TextInput id="server" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" change="validateInput(event, 'server can not be empty');" focusOut="validateInput(event, 'server can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
					</mx:VBox>
				</mx:FormItem>
				<mx:FormItem label="Port (normally 5222 or 80):">
					<mx:VBox>
						<mx:TextInput id="port" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" change="validateInput(event, 'port can not be empty');" focusOut="validateInput(event, 'port can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
					</mx:VBox>
				</mx:FormItem>
			</mx:Form>
		</mx:Canvas>
		
		<mx:Canvas label="Global Settings">
			<s:CheckBox label="Auto connect" id="autoConnectCheckBox" change="validateForm()"/>
			<s:CheckBox y="30" label="Show offline buddies" id="showOfflineBuddiesCheckBox" change="validateForm()"/>
			<s:CheckBox y="60" label="Animate buddy list" id="animateBuddyListCheckBox" change="validateForm()"/>
			<s:CheckBox y="90" label="Animate message list" id="animateMessageListCheckBox" change="validateForm()"/>
			<s:CheckBox y="120" label="Play sounds" id="playSoundsCheckBox" change="validateForm()"/>
			<!--<s:CheckBox y="150" label="Check shortened urls" id="checkUrlsCheckBox" change="validateForm()"/>-->
			
			<s:Button label="Check for updates" click="appModel.checkForUpdates(true)" right="0" />
			
			<s:Label right="106" y="34" text="Sort messages by"/>
			<s:DropDownList right="0" width="102" y="30" id="messageSortComboBox" dataProvider="{new ArrayCollection(['date sent', 'date received'])}" change="validateForm()"/>
			
			<s:Label right="78" y="64" text="Max workstream messages"/>
			<mx:NumericStepper right="0" y="60" maximum="1000" minimum="0" id="numTimelineMessages" change="validateForm()"/>
			
			<s:Label right="78" y="94" text="Max chat messages" />
			<mx:NumericStepper right="0" y="90" maximum="1000" minimum="0" id="numChatMessages" change="validateForm()"/>
			
			<s:Label right="86" y="124" text="Url shortening"/>
			<s:DropDownList right="0" width="82" id="urlShortenComboBox" y="120" dataProvider="{new ArrayCollection(UrlShortener.types)}" change="validateForm()"/>
			
			<s:Label right="124" y="154" text="Set away (0 = never)"/>
			<mx:NumericStepper right="56" y="150" maximum="120" minimum="0" id="awayTimeout" change="validateForm()"/>
			<s:Label right="0" y="154" text="minutes"/>
		</mx:Canvas>

	</mx:ViewStack>
	
	<popup:controlBarContent />
	
</popup:PopupWindowBase>
