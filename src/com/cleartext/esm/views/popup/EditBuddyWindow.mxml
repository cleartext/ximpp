<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:popup="com.cleartext.esm.views.popup.*"
	xmlns:common="com.cleartext.esm.views.common.*" 
	title="Add Buddy"
	submitButtonLabel="Add">
	
	<fx:Script>
		<![CDATA[
			import com.cleartext.esm.models.ApplicationModel;
			import com.cleartext.esm.models.AvatarModel;
			import com.cleartext.esm.models.ContactModel;
			import com.cleartext.esm.models.ChatModel;
			import com.cleartext.esm.models.XMPPModel;
			import com.cleartext.esm.models.types.MicroBloggingServiceTypes;
			import com.cleartext.esm.models.types.SubscriptionTypes;
			import com.cleartext.esm.models.valueObjects.Avatar;
			import com.cleartext.esm.models.valueObjects.Buddy;
			import com.cleartext.esm.models.valueObjects.Status;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.FlexEvent;

			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var buddies:ContactModel;
			
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			[Autowire]
			[Bindable]
			public var chats:ChatModel;
			
			[Autowire]
			[Bindable]
			public var avatarModel:AvatarModel;
			
			private var resetAvatar:Boolean = false;
			
			override protected function init(event:Event):void
			{
				super.init(event);
				list.dataProvider = wrapArray(buddies.groups.toArray());
				
				gatewayComboBox.dataProvider = new ArrayCollection(buddies.gatewayNames);
			}
			
			override protected function submit(event:Event):void
			{
				if(closing)
					return;

				if(!buddy)
				{
					var newJid:String = jidTextInput.text;
					if(gatewayComboBox.selectedIndex > 0)
						newJid = newJid.replace("@", "\\40") + "@" + gatewayComboBox.selectedItem;

					// make sure we set the private var so we don't reset the other values
					_buddy = new Buddy(newJid);
					avatar = avatarModel.getAvatar(newJid);
				}

				buddy.nickname = nicknameTextInput.text;
				avatar.displayName = nicknameTextInput.text;
				// bitmapString is calculated when we set bitmapData
				// we don't want to set the hash here so when the buddy
				// changes their own avatar we will see the change
				if(avatarInput.bitmapData)
					avatar.bitmapData = avatarInput.bitmapData;
				// if we have removed the avatar, then remove the hash
				// so we can try and get a new avatar from the buddy
				if(resetAvatar)
					avatar.urlOrHash = null;

				buddy.autoOpenTab = openTabCheckBox.selected;
				buddy.isMicroBlogging = mBlogCheckbox.selected;

				if(buddy.isPerson)
					buddy.groups = getSelected(list);
				
				if(buddies.containsJid(buddy.jid))
				{
					xmpp.modifyRosterItem(buddy);
				}
				else
				{
					buddies.addBuddy(buddy);
					chats.getChat(buddy, true);
					xmpp.addToRoster(buddy);
				}
				buddies.refresh();
				
				closeWindow();
			}
			
			[Bindable]
			public var avatar:Avatar;
			
			private var _buddy:Buddy;
			[Bindable(event="buddySet")]
			public function get buddy():Buddy
			{
				return _buddy;
			}
			public function set buddy(value:Buddy):void
			{
				_buddy = value;

				if(!buddy)
					return;
				
				title = "Edit Buddy";
				submitButton.label = "Save";
				isValid = true;
				
				if(!buddy.isGateway && buddies.gatewayNames.indexOf(buddy.host) != -1)
				{
					jidTextInput.text = buddy.username.replace("\\40", "@");
					gatewayComboBox.selectedItem = buddy.host;
				}
				else
				{
					jidTextInput.text = buddy.jid;
				}
				
				jidTextInput.enabled = false;
				gatewayComboBox.enabled = false;

				avatar = avatarModel.getAvatar(buddy.jid);
				nicknameTextInput.text = buddy.nickname;
				openTabCheckBox.selected = buddy.autoOpenTab;
				
				mBlogCheckbox.selected = buddy.isMicroBlogging;

				for each(var g:Object in list.dataProvider)
					g.selected = buddy.groups.indexOf(g.data) != -1;
					
				list.dataProvider.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.REFRESH));

				dispatchEvent(new Event("buddySet"));
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(AvatarModel.AVATAR_SIZE, AvatarModel.AVATAR_SIZE);
									var scale:Number = AvatarModel.AVATAR_SIZE / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (AvatarModel.AVATAR_SIZE - loadedBitmap.width * scale)/2;
									var ty:Number = (AvatarModel.AVATAR_SIZE - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									avatarInput.bitmapData = newBitmapData;
								});
						});
				}
				catch (error:Error)
				{
					Alert.show("Sorry, there was an error using that image, please try again.", "IMAGE ERROR");
				}
			}
			
			override protected function validateForm():void
			{
				isValid = jidTextInput.text.length > 0;
			}
		]]>
	</fx:Script>
	
	<mx:Text id="customLabel" paddingLeft="20" width="400"/>
	
	<mx:Form>

		<mx:FormItem label="Buddy id:">
			<mx:TextInput id="jidTextInput" change="validateInput(event, 'jid can not be empty')" focusOut="validateInput(event, 'jid can not be empty')"  width="250"/>
		</mx:FormItem>
		
		<mx:FormItem label="Gateway:">
			<s:DropDownList id="gatewayComboBox" />
		</mx:FormItem>
		
		<mx:FormItem label="Nickname:">
			<mx:TextInput id="nicknameTextInput" width="250"/>
		</mx:FormItem>

		<mx:FormItem label="Profile picture:">
			<mx:HBox>
				<common:AvatarRenderer id="avatarInput" editMode="true" width="{AvatarModel.AVATAR_SIZE}" height="{AvatarModel.AVATAR_SIZE}" editClicked="changeAvatar()" avatar="{avatar}"/>
				<mx:Button label="remove" click="avatarInput.bitmapData = new BitmapData(AvatarModel.AVATAR_SIZE, AvatarModel.AVATAR_SIZE); resetAvatar=true" />
			</mx:HBox>
		</mx:FormItem>
		
		<mx:FormItem>
			<s:CheckBox label="Add to work stream?" id="mBlogCheckbox"/>
		</mx:FormItem>
		
		<mx:FormItem>
			<mx:CheckBox label="Open new tab when message received?" id="openTabCheckBox" selected="true"/>
		</mx:FormItem>

		<mx:FormItem label="Groups:" enabled="{!((buddy as Object).isGateway || mBlogCheckbox.selected)}">
			<s:List id="list" width="250" height="220"
					focusEnabled="false" alternatingItemColors="[#f3f3f3, #ffffff]">
				<s:itemRenderer>
					<fx:Component>
						<s:ItemRenderer>
							<s:layout>
								<s:HorizontalLayout verticalAlign="middle" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" />
							</s:layout>
							<s:CheckBox selected="{data.selected}" click="data.selected = !data.selected"/>
							<s:Label text="{data.data}" />
						</s:ItemRenderer>
					</fx:Component>
				</s:itemRenderer>
			</s:List>

		</mx:FormItem>

	</mx:Form>

	<popup:controlBarContent />
	
</popup:PopupWindowBase>
