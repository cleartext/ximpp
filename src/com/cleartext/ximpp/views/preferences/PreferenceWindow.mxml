<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
	width="100%" height="100%"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	showCloseButton="true"
	title="User Preferences" 
	layout="absolute"
	close="closeHandler()"
	creationComplete="init()"
	xmlns:preferences="com.cleartext.ximpp.views.preferences.*" xmlns:common="com.cleartext.ximpp.views.common.*">
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import com.cleartext.ximpp.models.XMPPModel;
			import com.cleartext.ximpp.models.DatabaseModel;
			import com.cleartext.ximpp.models.SettingsModel;
			import com.cleartext.ximpp.models.ApplicationModel;
			import com.cleartext.ximpp.models.valueObjects.UrlShortener;
			import com.cleartext.ximpp.models.valueObjects.UserAccount;
			import mx.utils.ObjectUtil;
			import mx.controls.Alert;
			import mx.graphics.codec.JPEGEncoder;
			import mx.collections.ArrayCollection;
			
			private var changesMade:Boolean = false;
			
			private var previousAccount:UserAccount;
			private function get accountCollection():ArrayCollection
			{
				return accountList.dataProvider as ArrayCollection;
			}
						
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			private function get settings():SettingsModel
			{
				return appModel.settings;
			}
			
			private function get database():DatabaseModel
			{
				return appModel.database;
			}
			
			private function get xmpp():XMPPModel
			{
				return appModel.xmpp;
			}
			
			private function init():void
			{
				// set global values
				autoConnectCheckBox.selected = settings.global.autoConnect;
				urlShortenComboBox.selectedItem = settings.global.urlShortener;
				sortTimelineCheckBox.selected = settings.global.timelineTopDown;
				sortChatCheckBox.selected = settings.global.chatTopDown;
				animateBuddyListCheckBox.selected = settings.global.animateBuddyList;
				numTimelineMessages.value = settings.global.numTimelineMessages;
				numChatMessages.value = settings.global.numChatMessages;
				
				// load user accounts
				accountList.dataProvider = database.getAllUserAccounts();
				
				for each(var userAcount:UserAccount in accountCollection)
				{
					if(settings.userAccount && userAcount.userId == settings.userAccount.userId)
					{
						accountList.selectedItem = userAcount;
						break;
					}
				}

				selectedAccountChanged();
			}
		
			private function closeHandler():void
			{
				selectedAccountChanged();
				
				// set simple values
				settings.global.autoConnect = autoConnectCheckBox.selected;
				settings.global.urlShortener = urlShortenComboBox.selectedItem as String;
				settings.global.timelineTopDown = sortTimelineCheckBox.selected;
				settings.global.chatTopDown = sortChatCheckBox.selected;
				settings.global.animateBuddyList = animateBuddyListCheckBox.selected;
				settings.global.numTimelineMessages = numTimelineMessages.value;
				settings.global.numChatMessages = numChatMessages.value;

				settings.userAccount = accountList.selectedItem as UserAccount;
				
				database.saveGlobalSettings();
			}
			
			private function selectedAccountChanged():void
			{
				if(previousAccount && changesMade)
				{
					previousAccount.accountName = accountName.text;
					previousAccount.nickName = nickName.text;
					previousAccount.avatar = avatar.bitmapData;
					previousAccount.jid = jid.text;
					previousAccount.password = password.text;
					previousAccount.server = server.text;
					
					database.saveUserAccount(previousAccount);
					changesMade = false;
				}
				
				previousAccount = accountList.selectedItem as UserAccount;
				
				if(previousAccount)
				{
					accountName.text = previousAccount.accountName;
					nickName.text = previousAccount.nickName;
					if(previousAccount.avatar)
					{
						avatar.bitmapData = previousAccount.avatar;
					}
					else
					{
						previousAccount.addEventListener("avatarChanged",
							function(event:Event):void
							{
								avatar.bitmapData = event.target.avatar;
							});
					}
					jid.text = previousAccount.jid;
					password.text = previousAccount.password;
					server.text = previousAccount.server;
				}
				else
				{
					addAccount();
				}
				
				accountCollection.refresh();
			}
			
			private function addAccount():void
			{
				var account:UserAccount = new UserAccount();
				database.saveUserAccount(account);
				accountCollection.addItem(account);
				accountList.selectedItem = account;
				selectedAccountChanged();
			}
			
			private function removeAccount():void
			{
				if(accountCollection.length == 1)
				{
					Alert.show("You must have at least one user account", "Can not delete account");
					return;
				}
					
				var index: int = accountList.selectedIndex;
				appModel.log("index to delete: " + index);
				accountCollection.removeItemAt(index);
				database.removeAccount(previousAccount.userId);
				previousAccount = null;
				
				if(accountCollection.length > 0)
				{
					index = Math.max(0, index-1);
					appModel.log("new index: " + index);
					accountList.selectedItem = accountCollection.getItemAt(index);
				}
				
				selectedAccountChanged();
				
				appModel.log("final index: " + accountList.selectedIndex);
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							changesMade = true;
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(64, 64);
									var scale:Number = 64 / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (64 - loadedBitmap.width * scale)/2;
									var ty:Number = (64 - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									avatar.bitmapData = newBitmapData;
								});
						});
				}
				catch (error:Error)
				{
					appModel.log(error);
				}
			}
			
		]]>
	</mx:Script>
	
	
	<mx:VBox id="listCanvas" width="210" top="10" bottom="10" left="10">
		<mx:List id="accountList" height="100%" width="100%" horizontalScrollPolicy="off" labelField="accountName" change="selectedAccountChanged()"/>
		<preferences:AddRemoveButton
			addButtonClicked="addAccount()"
			removeButtonClicked="removeAccount()"/>
		<mx:CheckBox label="auto connect" id="autoConnectCheckBox"/>
		<mx:Canvas>
			<mx:Label text="url shorten service:" y="4"/>
			<mx:ComboBox id="urlShortenComboBox" x="114" dataProvider="{UrlShortener.types}"/>
		</mx:Canvas>
		<mx:CheckBox label="sort timeline top to bottom" id="sortTimelineCheckBox"/>
		<mx:CheckBox label="sort chat top to bottom" id="sortChatCheckBox"/>
		<mx:CheckBox label="animate buddy list" id="animateBuddyListCheckBox"/>
		<mx:Canvas>
			<mx:NumericStepper maximum="1000" minimum="0" id="numTimelineMessages" />
			<mx:Label x="78" text="max timeline messages" />
		</mx:Canvas>
		<mx:Canvas>
			<mx:NumericStepper maximum="1000" minimum="0" id="numChatMessages" />
			<mx:Label x="78" text="max chat messages" />
		</mx:Canvas>
	</mx:VBox>

	<mx:Form x="210">
		<mx:FormItem label="account name:">
			<mx:TextInput id="accountName" change="changesMade = true; if(previousAccount) { previousAccount.accountName = accountName.text; accountCollection.refresh(); }"/>
		</mx:FormItem>
		<mx:FormItem label="nick name:">
			<mx:TextInput id="nickName" change="changesMade = true;" />
		</mx:FormItem>
		<mx:FormItem label="profile picture:" direction="horizontal">
			<common:Avatar id="avatar" width="64" height="64" buttonMode="true" editClicked="changeAvatar()" />
		</mx:FormItem>
		<mx:FormItem label="jid:">
			<mx:TextInput id="jid" change="changesMade = true;" />
		</mx:FormItem>
		<mx:FormItem label="password:">
			<mx:TextInput id="password" displayAsPassword="true" change="changesMade = true;" />
		</mx:FormItem>
		<mx:FormItem label="server:">
			<mx:TextInput id="server" change="changesMade = true;" />
		</mx:FormItem>

		<mx:FormItem label="gateways:" enabled="false" width="100%">
			<mx:List id="gatewayList" height="70" width="100%">
				<mx:dataProvider>
					<mx:String>Gatway selection</mx:String>
					<mx:String>not currently</mx:String>
					<mx:String>implemented</mx:String>
				</mx:dataProvider>
			</mx:List>
			<preferences:AddRemoveButton />
		</mx:FormItem>
		<mx:FormItem label="gateway name:" enabled="false">
			<mx:TextInput id="gatewayName"/>
		</mx:FormItem>
		<mx:FormItem label="gateway type:" enabled="false">
			<mx:ComboBox id="gatewayType" />
		</mx:FormItem>
		<mx:FormItem label="user name:" enabled="false">
			<mx:TextInput id="gatewayUsername"/>
		</mx:FormItem>
		<mx:FormItem label="password:" enabled="false">
			<mx:TextInput id="gatewayPassword" displayAsPassword="true"/>
		</mx:FormItem>
	</mx:Form>
</mx:TitleWindow>
