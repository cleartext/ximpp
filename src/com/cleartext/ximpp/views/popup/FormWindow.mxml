<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:popup="com.cleartext.ximpp.views.popup.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="Edit Group"
	submitButtonLabel="done" >
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.controls.TextArea;
			import mx.controls.CheckBox;
			import com.adobe.protocols.dict.Dict;
			import mx.core.UIComponent;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.containers.FormItem;
			import com.cleartext.ximpp.models.valueObjects.FormField;
			import com.cleartext.ximpp.models.valueObjects.FormObject;
			import mx.events.FlexEvent;
			import mx.collections.ArrayCollection;
			import com.cleartext.ximpp.models.valueObjects.Buddy;
			import com.cleartext.ximpp.models.BuddyModel;
			import mx.events.CloseEvent;
			import com.cleartext.ximpp.models.XMPPModel;
			import com.cleartext.ximpp.models.DatabaseModel;
			import com.cleartext.ximpp.models.SettingsModel;
			import com.cleartext.ximpp.models.ApplicationModel;

			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			public var form:FormObject;
		
			private var vars:Dictionary = new Dictionary();
			private var required:Array = new Array();
			
			override protected function init(event:FlexEvent):void
			{
				title = "Request from " + form.from;
				instructions.text = form.instructions;
				
				for each(var field:FormField in form.fields)
				{
					var item:FormItem = new FormItem();
					item.label = field.label;
					
					var child:DisplayObject;
					switch(field.type)
					{
						case "fixed" :
							child = new Text();
							(child as Text).text = field.value.toString();
							break;
						case "text-multi" :
							child = new TextArea();
							(child as TextArea).text = field.value.toString();
							break;
						case "text-private" :
							child = new TextInput();
							(child as TextInput).text = field.value.toString();
							(child as TextInput).displayAsPassword = true;
							break;
						case "text-single" :
							child = new TextInput();
							(child as TextInput).text = field.value.toString();
							break;
					}
					
					if(child)
					{
						child.width = 200;
						item.addChild(child);
						mxmlForm.addChild(item);
	
						if(field.varName)
							vars[field.varName] = child;
	
						if(field.required)
						{
							child.addEventListener(Event.CHANGE, validateInput);
							child.addEventListener(FocusEvent.FOCUS_OUT, validateInput);
							required.push(child);
						}
					}
				}
				
				isValid = required.length == 0;
			}
			
			override protected function submit(event:Event):void
			{
				for each(var field:FormField in form.fields)
				{
					if(field.varName)
					{
						var child:Object = vars[field.varName];
						if(child.hasOwnProperty("text"));
							field.value = child.text;
					}
				}
				
				xmpp.submitForm(form);
				
				closeWindow();
			}
			
			override protected function validateForm():void
			{
				for each(var child:Object in required)
				{
					if(child.hasOwnProperty("text") && child.text=="")
					{
						isValid = false;
						return;
					}
				}
				isValid = true;
			}
		]]>
	</mx:Script>
	
	<mx:Text width="400" id="instructions"/>
    <mx:Form id="mxmlForm" />
    
    <mx:ControlBar />

</popup:PopupWindowBase>