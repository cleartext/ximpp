<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:popup="com.cleartext.ximpp.views.popup.*"
	width="500" height="100%"
	horizontalScrollPolicy="off"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="User Preferences"
	layout="absolute"
	xmlns:preferences="com.cleartext.ximpp.views.preferences.*" 
	xmlns:common="com.cleartext.ximpp.views.common.*" 
	submitButtonLabel="save"
	isValid="true"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import com.cleartext.ximpp.models.BuddyModel;
			import com.adobe.crypto.SHA1;
			import com.cleartext.ximpp.models.valueObjects.Status;
			import com.cleartext.ximpp.models.utils.AvatarUtils;
			import com.cleartext.ximpp.events.BuddyEvent;
			import mx.events.CollectionEvent;
			import com.cleartext.ximpp.models.XMPPModel;
			import com.cleartext.ximpp.models.DatabaseModel;
			import com.cleartext.ximpp.models.SettingsModel;
			import com.cleartext.ximpp.models.ApplicationModel;
			import com.cleartext.ximpp.models.valueObjects.UrlShortener;
			import com.cleartext.ximpp.models.valueObjects.UserAccount;
			import mx.utils.ObjectUtil;
			import mx.controls.Alert;
			import mx.graphics.codec.JPEGEncoder;
			import mx.collections.ArrayCollection;
			
			public var changesMade:Boolean = false;
			
			private static const TEXT_INPUT_WIDTH:Number = 160;
			
			private var previousAccount:UserAccount;
			private function get accountCollection():ArrayCollection
			{
				return accountList.dataProvider as ArrayCollection;
			}
			
			private var accountsToDelete:Array = new Array();
			
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			[Autowire]
			[Bindable]
			public var settings:SettingsModel;
			
			[Autowire]
			[Bindable]
			public var database:DatabaseModel;
			
			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var buddies:BuddyModel;
			
			override protected function init(event:FlexEvent):void
			{
				// set global values
				autoConnectCheckBox.selected = settings.global.autoConnect;
				urlShortenComboBox.selectedItem = settings.global.urlShortener;
				animateBuddyListCheckBox.selected = settings.global.animateBuddyList;
				animateMessageListCheckBox.selected = settings.global.animateMessageList;
				showOfflineBuddiesCheckBox.selected = settings.global.showOfflineBuddies;
				numTimelineMessages.value = settings.global.numTimelineMessages;
				numChatMessages.value = settings.global.numChatMessages;
				messageSortComboBox.selectedItem = (settings.global.sortByTimestamp) ? "date sent" : "date received";
				awayTimeout.value = settings.global.awayTimeout;
				
				// load user accounts
				accountList.dataProvider = database.getAllUserAccounts();
				
				for each(var userAcount:UserAccount in accountCollection)
				{
					if(settings.userAccount && userAcount.userId == settings.userAccount.userId)
					{
						accountList.selectedItem = userAcount;
						break;
					}
				}
				
				selectedAccountChanged();
			}
		
			override protected function submit(event:Event):void
			{
//				selectedAccountChanged();
				
				// commit global values
				settings.global.autoConnect = autoConnectCheckBox.selected;
				settings.global.urlShortener = urlShortenComboBox.selectedItem as String;
				settings.global.animateBuddyList = animateBuddyListCheckBox.selected;
				settings.global.animateMessageList = animateMessageListCheckBox.selected;
				settings.global.showOfflineBuddies = showOfflineBuddiesCheckBox.selected;
				settings.global.numTimelineMessages = numTimelineMessages.value;
				settings.global.numChatMessages = numChatMessages.value;
				settings.global.sortByTimestamp = (messageSortComboBox.selectedItem == "date sent");
				settings.global.awayTimeout = awayTimeout.value;
				
				for each(var userId:int in accountsToDelete)
					database.removeAccount(userId);
				
//				for each(var userAccount:UserAccount in accountList.dataProvider)
//					database.saveUserAccount(userAccount);
				
				settings.userAccount.accountName = accountName.text;
				settings.userAccount.nickName = nickName.text;
				settings.userAccount.jid = jid.text;
				settings.userAccount.password = password.text;
				settings.userAccount.server = server.text;
				
				if(avatarInput.bitmapData)
				{
					settings.userAccount.avatar = avatarInput.bitmapData;
					settings.userAccount.avatarHash = SHA1.hashBytes(avatarInput.bitmapData.getPixels(avatarInput.bitmapData.rect));
				}
				else
				{
					settings.userAccount.avatar = null;
					settings.userAccount.avatarHash = "";
				}
				
				database.saveUserAccount(settings.userAccount);

//				settings.userAccount = previousAccount;
				
				appModel.setUserTimeout();
				database.saveGlobalSettings();

				buddies.refresh();
				
				closeWindow();
			}
			
			private function selectedAccountChanged():void
			{
				if(previousAccount)
				{
					previousAccount.accountName = accountName.text;
					previousAccount.nickName = nickName.text;
					previousAccount.jid = jid.text;
					previousAccount.password = password.text;
					previousAccount.server = server.text;
					if(avatarInput.bitmapData)
					{
						previousAccount.avatar = avatarInput.bitmapData;
						previousAccount.avatarHash = SHA1.hashBytes(avatarInput.bitmapData.getPixels(avatarInput.bitmapData.rect));
					}
					else
					{
						previousAccount.avatar = null;
						previousAccount.avatarHash = "";
					}

//					previousAccount.mBlogPrivateJid = keepJidPrivate.selected;
//					previousAccount.mBlogDisplayName = displayName.text;
//					
//					if(useChatAvatar.selected)
//					{
//						previousAccount.mBlogUseChatAvatar = true;
//						previousAccount.mBlogAvatarUrl = "";
//						previousAccount.mBlogAvatar = null;
//					}
//					else
//					{
//						previousAccount.mBlogUseChatAvatar = false;
//						previousAccount.mBlogAvatarUrl = avatarUrl.text;
//					}
				}
				
				previousAccount = accountList.selectedItem as UserAccount;
				
				if(previousAccount)
				{
					accountName.text = previousAccount.accountName;
					nickName.text = previousAccount.nickName;
					avatarInput.data = previousAccount;
					jid.text = previousAccount.jid;
					password.text = previousAccount.password;
					server.text = previousAccount.server;
					
//					keepJidPrivate.selected = previousAccount.mBlogPrivateJid;
//					displayName.text = previousAccount.mBlogDisplayName;
//					
//					if(previousAccount.mBlogUseChatAvatar)
//					{
//						useChatAvatar.selected = true;
//						avatarUrl.text = "";
//						avatar.data = null;
//					}
//					else
//					{
//						useChatAvatar.selected = false;
//						avatarUrl.text = previousAccount.mBlogAvatarUrl;
//					}
				}
				else
				{
					addAccount();
				}
				
				accountCollection.refresh();
			}
			
			private function addAccount():void
			{
				var account:UserAccount = new UserAccount();
				accountCollection.addItem(account);
				accountList.selectedItem = account;
				selectedAccountChanged();
			}
			
			private function removeAccount():void
			{
				if(accountCollection.length == 1)
				{
					Alert.show("You must have at least one user account", "Can not delete account");
					return;
				}
					
				var index: int = accountList.selectedIndex;
				accountCollection.removeItemAt(index);
				accountsToDelete.push(previousAccount.userId);
				previousAccount = null;
				
				if(accountCollection.length > 0)
				{
					index = Math.max(0, index-1);
					accountList.selectedItem = accountCollection.getItemAt(index);
				}
				
				selectedAccountChanged();
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							changesMade = true;
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(AvatarUtils.AVATAR_SIZE, AvatarUtils.AVATAR_SIZE);
									var scale:Number = AvatarUtils.AVATAR_SIZE / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.width * scale)/2;
									var ty:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									avatarInput.bitmapData = newBitmapData;
								});
						});
				}
				catch (error:Error)
				{
					appModel.log(error);
				}
			}
			
			private function getAvatarByUrl():void
			{
				
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Label x="10" y="10" styleName="blackBoldBig" text="Global Settings" />

	<mx:HRule left="10" right="10" y="35" />

	<mx:Canvas left="10" y="45" right="10">

		<mx:CheckBox label="Auto connect" id="autoConnectCheckBox"/>
		<mx:CheckBox y="30" label="Show offline buddies" id="showOfflineBuddiesCheckBox"/>
		<mx:CheckBox y="60" label="Animate buddy list" id="animateBuddyListCheckBox"/>
		<mx:CheckBox y="90" label="Animate message list" id="animateMessageListCheckBox"/>
		<mx:CheckBox y="120" label="Play sounds" id="playSoundsCheckBox" enabled="false"/>

		<mx:Label right="106" y="4" text="Sort messages by"/>
		<mx:ComboBox right="0" width="102" id="messageSortComboBox" dataProvider="{['date sent', 'date received']}"/>
	
		<mx:Label right="78" y="34" text="Max workstream messages"/>
		<mx:NumericStepper right="0" y="30" maximum="1000" minimum="0" id="numTimelineMessages" />

		<mx:Label right="78" y="64" text="Max chat messages" />
		<mx:NumericStepper right="0" y="60" maximum="1000" minimum="0" id="numChatMessages" />

		<mx:Label right="86" y="94" text="Url shortening"/>
		<mx:ComboBox right="0" width="82" id="urlShortenComboBox" y="90" dataProvider="{UrlShortener.types}"/>

		<mx:Label right="124" y="124" text="Set away (0 = never)"/>
		<mx:NumericStepper right="56" y="120" maximum="120" minimum="0" id="awayTimeout" />
		<mx:Label right="0" y="124" text="minutes"/>

	</mx:Canvas>

	<mx:Label x="10" y="200" styleName="blackBoldBig" text="Account Settings" />
	
	<mx:HRule left="10" right="10" y="225" />

	<mx:Canvas y="235" right="10" left="10" >
		
		<mx:List 
			id="accountList" 
			top="10" bottom="45" 
			width="170" 
			horizontalScrollPolicy="off" 
			labelField="accountName" 
			change="selectedAccountChanged()" enabled="false" visible="false" includeInLayout="false"/>

		<!--<popup:AddRemoveButton
			bottom="20"
			width="170"
			addButtonClicked="addAccount()"
			removeButtonClicked="removeAccount()" enabled="false" toolTip="multiple accounts comming soon" />-->
		
		<mx:Form horizontalCenter="0">
			<mx:FormItem label="Account name:">
				<mx:VBox>
					<mx:TextInput id="accountName" width="{TEXT_INPUT_WIDTH}"
						focusOut="validateInput(event, 'account name can not be empty')" 
						change="changesMade = true; validateInput(event, 'account name can not be empty'); if(previousAccount) { previousAccount.accountName = accountName.text; accountCollection.refresh(); }"/>
				</mx:VBox>
			</mx:FormItem>
			<mx:FormItem label="Nickname:">
				<mx:TextInput id="nickName" change="changesMade = true;" width="{TEXT_INPUT_WIDTH}" />
			</mx:FormItem>
			<mx:FormItem label="Profile picture:" direction="horizontal">
				<common:Avatar id="avatarInput" width="{AvatarUtils.AVATAR_SIZE}" height="{AvatarUtils.AVATAR_SIZE}" buttonMode="true" editClicked="changeAvatar()" />
			</mx:FormItem>

			<mx:FormItem label="Account id:">
				<mx:VBox>
					<mx:TextInput id="jid" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" change="changesMade = true; validateInput(event, 'jid can not be empty');" focusOut="validateInput(event, 'jid can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
				</mx:VBox>
			</mx:FormItem>
			<mx:FormItem label="Password:">
				<mx:VBox>
					<mx:TextInput id="password" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" displayAsPassword="true" change="changesMade = true; validateInput(event, 'password can not be empty');" focusOut="validateInput(event, 'password can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
				</mx:VBox>
			</mx:FormItem>
			<mx:FormItem label="Server:">
				<mx:VBox>
					<mx:TextInput id="server" enabled="{!xmpp.connected}" toolTip="{!xmpp.connected ? '' : 'log off to make changes'}" change="changesMade = true; validateInput(event, 'server can not be empty');" focusOut="validateInput(event, 'server can not be empty'); " width="{TEXT_INPUT_WIDTH}" />
				</mx:VBox>
			</mx:FormItem>
			
			<!--<mx:FormHeading label="Micro Blogging Settings" paddingTop="7"/>

			<mx:FormItem height="10">
				<mx:HRule width="100%" />
			</mx:FormItem>

			<mx:FormItem label="keep jid private?:" >
				<mx:CheckBox id="keepJidPrivate" />
			</mx:FormItem>
			<mx:FormItem label="display name:">
				<mx:TextInput id="displayName" change="changesMade = true;" width="{TEXT_INPUT_WIDTH}" />
			</mx:FormItem>
			<mx:FormItem label="url:">
				<mx:TextInput id="avatarUrl" width="{TEXT_INPUT_WIDTH}" enabled="{!useChatAvatar.selected}"/>
				<mx:CheckBox id="useChatAvatar" label="use default avatar?" />
			</mx:FormItem>-->
		</mx:Form>

		<!--<common:Avatar id="mBlogAvatar" width="{AvatarUtils.AVATAR_SIZE}" height="{AvatarUtils.AVATAR_SIZE}" bottom="20" x="190"/>-->

	</mx:Canvas>
	
	<mx:ControlBar/>

</popup:PopupWindowBase>
