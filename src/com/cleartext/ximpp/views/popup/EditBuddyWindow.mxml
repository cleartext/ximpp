<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:popup="com.cleartext.ximpp.views.popup.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.cleartext.ximpp.views.common.*"
	title="Edit Buddy"
	submitButtonLabel="done"
	isValid="true">
	
	<mx:Script>
		<![CDATA[
			import com.cleartext.ximpp.models.valueObjects.Status;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.events.FlexEvent;
			import com.cleartext.ximpp.models.BuddyModel;
			import mx.controls.Alert;
			import com.cleartext.ximpp.models.AvatarUtils;
			import com.cleartext.ximpp.models.valueObjects.Buddy;
			import com.cleartext.ximpp.models.types.SubscriptionTypes;
			import mx.events.CloseEvent;
			import com.cleartext.ximpp.models.XMPPModel;
			import com.cleartext.ximpp.models.DatabaseModel;
			import com.cleartext.ximpp.models.SettingsModel;
			import com.cleartext.ximpp.models.ApplicationModel;

			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var buddies:BuddyModel;
			
			override protected function submit(event:Event):void
			{
				buddy.nickName = nickname.text;
				if(!buddy.microBlogging)
					buddy.groups = groups.selectedItems;
				buddies.addBuddy(buddy);
				buddies.refresh();
				
				xmpp.modifyRosterItem(buddy);
				
				if(subscribeYes.selected && !buddy.subscribedTo)
					// start subscribing
					xmpp.sendSubscribe(buddy.jid, SubscriptionTypes.SUBSCRIBE);
				else if(subscribeNo.selected && buddy.subscribedTo)
					// stop subscribing
					xmpp.sendSubscribe(buddy.jid, SubscriptionTypes.UNSUBSCRIBE);
				
				if(publishNo.selected && buddy.publishTo)
					// stop publishing
					xmpp.sendSubscribe(buddy.jid, SubscriptionTypes.UNSUBSCRIBED);
				
				closeWindow();
			}
			
			private var _buddy:Buddy;
			public function get buddy():Buddy
			{
				return _buddy;
			}
			public function set buddy(value:Buddy):void
			{
				_buddy = value;
				jid.text = buddy.jid;
				nickname.text = buddy.nickName;
				avatar.data = buddy;
				groups.enabled = !buddy.isGateway && !buddy.microBlogging;
				if(!buddy.microBlogging)
					groups.selectedItems = buddy.groups;
				avatar.buttonMode = (buddy.avatarHash == "" || buddy.avatarHash == null);
				
				if(buddy.subscribedTo)
					subscribeYes.selected = true;
				else
					subscribeNo.selected = true;
				
				if(buddy.publishTo)
					publishYes.selected = true;
				else
				{
					publishYes.enabled = false;
					publishYes.toolTip = "they have to request to see you online";
					publishNo.selected = true;
				}
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(AvatarUtils.AVATAR_SIZE, AvatarUtils.AVATAR_SIZE);
									var scale:Number = AvatarUtils.AVATAR_SIZE / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.width * scale)/2;
									var ty:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									buddy.avatar = newBitmapData;
								});
						});
				}
				catch (error:Error)
				{
					// to do
				}
			}

		]]>
	</mx:Script>
	
	<mx:Form>
		
		<mx:FormItem label="jid:">
			<mx:Label id="jid" />
		</mx:FormItem>
		
		<mx:FormItem label="nickname:">
			<mx:TextInput id="nickname" />
		</mx:FormItem>

		<mx:FormItem label="avatar:">
			<common:Avatar id="avatar" width="{AvatarUtils.AVATAR_SIZE}" height="{AvatarUtils.AVATAR_SIZE}" editClicked="changeAvatar()"/>
		</mx:FormItem>

		<mx:FormItem label="subscription:">
			<mx:HBox>
				<mx:RadioButtonGroup id="subscribe" />
				<mx:RadioButton id="subscribeYes" label="yes" groupName="subscribe" paddingTop="0"/>
				<mx:RadioButton id="subscribeNo" label="no"  groupName="subscribe" paddingTop="0"/>
				<mx:Label text="ask to see when they are online" />
			</mx:HBox>
			<mx:HBox>
				<mx:RadioButtonGroup id="publish" />
				<mx:RadioButton id="publishYes" label="yes" groupName="publish" paddingTop="0"/>
				<mx:RadioButton id="publishNo" label="no"  groupName="publish" paddingTop="0"/>
				<mx:Label text="let them see when you are online" />
			</mx:HBox>
		</mx:FormItem>

		<mx:FormItem label="groups:">
			<mx:Label text="use ctrl/cmd - click to deselect and to select more than one" />
			<mx:List
				id="groups" 
				allowMultipleSelection="true" 
				dataProvider="{buddies.groups}" 
				width="210" height="120"/>
		</mx:FormItem>

	</mx:Form>

	<mx:ControlBar/>

</popup:PopupWindowBase>
