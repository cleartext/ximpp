<?xml version="1.0" encoding="utf-8"?>
<popup:PopupWindowBase
	xmlns:popup="com.cleartext.ximpp.views.popup.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.cleartext.ximpp.views.common.*"
	title="Add Buddy"
	submitButtonLabel="add">
	
	<mx:Script>
		<![CDATA[
			import com.cleartext.ximpp.models.ApplicationModel;
			import mx.controls.Alert;
			import com.cleartext.ximpp.models.valueObjects.Status;
			import mx.events.FlexEvent;
			import com.cleartext.ximpp.models.utils.AvatarUtils;
			import com.cleartext.ximpp.models.valueObjects.Buddy;
			import com.cleartext.ximpp.models.types.SubscriptionTypes;
			import mx.events.CloseEvent;
			import com.cleartext.ximpp.models.BuddyModel;
			import com.cleartext.ximpp.models.XMPPModel;

			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var buddies:BuddyModel;
			
			[Autowire]
			[Bindable]
			public var appModel:ApplicationModel;
			
			override protected function init(event:FlexEvent):void
			{
				super.init(event);
				list.dataProvider = wrapArray(buddies.groups.toArray());
			}
			
			private var _presenceRequest:Boolean = false;
			public function get presenceRequest():Boolean
			{
				return _presenceRequest;
			}
			public function set presenceRequest(value:Boolean):void
			{
				_presenceRequest = value;
				
				if(presenceRequest)
				{
					title = "Buddy Request";
					submitButton.label= "add";
					cancelButton.label= "deny";
					customLabel.text = buddy.nickName + " wants to be added to your buddy list.";
				}
			}
			
			public function set messageString(value:String):void
			{
				if(value)
					customLabel.text += " They sent you the following message:\n\n" + value;
			}
			
			override protected function submit(event:Event):void
			{
				if(!buddy)
					// make sure we set the private var so we don't reset the other values
					_buddy = new Buddy(jidTextInput.text);
				
				buddy.nickName = nicknameTextInput.text;
				buddy.microBlogging = mBlogCheckbox.selected;

				buddy.avatar = avatarInput.bitmapData;
				if(avatarInput.bitmapData == null)
					buddy.avatarHash = null;

				if(!buddy.microBlogging && !buddy.isGateway)
					buddy.groups = getSelected(list);
				
				if(buddies.containsJid(buddy.jid))
				{
					xmpp.modifyRosterItem(buddy);
				}
				else
				{
					appModel.getChat(buddy);
					buddies.addBuddy(buddy);
					xmpp.addToRoster(buddy.jid, buddy.nickName, buddy.groups);
				}
				buddies.refresh();
				
				closeWindow();
			}
			
			override protected function cancelHandler(event:Event):void
			{
				if(presenceRequest)
					xmpp.sendSubscribe(buddy.jid, SubscriptionTypes.UNSUBSCRIBED);

				closeWindow();
			}
			
			private var _buddy:Buddy;
			[Bindable(event="buddySet")]
			public function get buddy():Buddy
			{
				return _buddy;
			}
			public function set buddy(value:Buddy):void
			{
				_buddy = value;

				if(!buddy)
					return;
				
				title = "Edit Buddy";
				submitButton.label = "done";
				isValid = true;
						
				jidTextInput.enabled = false;
				jidTextInput.text = buddy.jid;
				nicknameTextInput.text = buddy.nickName;
				avatarInput.bitmapData = buddy.avatar;
				mBlogCheckbox.selected = buddy.microBlogging;
								
				for each(var g:Object in list.dataProvider)
					g.selected = !buddy.microBlogging && buddy.groups.indexOf(g.data) != -1;

				dispatchEvent(new Event("buddySet"));
			}
			
			private function changeAvatar():void
			{
				try 
				{
					var newImage:File = new File();
					newImage.browseForOpen("Open",  [new FileFilter("Images", "*.jpg;*.gif;*.png")]);
					newImage.addEventListener(Event.SELECT, 
						function():void
						{
							var filestream:FileStream=new FileStream();
							filestream.open(newImage,"read");
							var bytesRead:ByteArray = new ByteArray();
							filestream.readBytes(bytesRead, 0, filestream.bytesAvailable);
							var loader:Loader = new Loader();
							loader.loadBytes(bytesRead);
							loader.contentLoaderInfo.addEventListener(Event.COMPLETE,
								function():void
								{
									var loadedBitmap:Bitmap = loader.content as Bitmap;
									var newBitmapData:BitmapData = new BitmapData(AvatarUtils.AVATAR_SIZE, AvatarUtils.AVATAR_SIZE);
									var scale:Number = AvatarUtils.AVATAR_SIZE / Math.max(loadedBitmap.width, loadedBitmap.height);
									var tx:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.width * scale)/2;
									var ty:Number = (AvatarUtils.AVATAR_SIZE - loadedBitmap.height * scale)/2;
									newBitmapData.draw(loadedBitmap, new Matrix(scale, 0, 0, scale, tx, ty));
									avatarInput.bitmapData = newBitmapData;
								});
						});
				}
				catch (error:Error)
				{
					Alert.show("Sorry, there was an error using that image, please try again.", "IMAGE ERROR");
				}
			}
			
			override protected function validateForm():void
			{
				isValid = jidTextInput.text.length > 0;
			}
		]]>
	</mx:Script>
	
	<mx:Text id="customLabel" paddingLeft="20" width="400"/>
	
	<mx:Form>

		<mx:FormItem label="Account id:">
			<mx:TextInput id="jidTextInput" change="validateInput(event, 'jid can not be empty')" focusOut="validateInput(event, 'jid can not be empty')"  width="250"/>
		</mx:FormItem>
		
		<mx:FormItem label="Nickname:">
			<mx:TextInput id="nicknameTextInput" width="250"/>
		</mx:FormItem>

		<mx:FormItem label="Profile picture:">
			<mx:HBox>
				<common:Avatar id="avatarInput" buttonMode="true" width="{AvatarUtils.AVATAR_SIZE}" height="{AvatarUtils.AVATAR_SIZE}" editClicked="changeAvatar()"/>
				<mx:Button label="remove" click="avatarInput.bitmapData=null" />
			</mx:HBox>
		</mx:FormItem>
		
		<mx:FormItem>
			<mx:CheckBox label="Add to work stream?" id="mBlogCheckbox"/>
		</mx:FormItem>

		<mx:FormItem>
			<mx:CheckBox label="Open new tab when message received?" id="openTabCheckBox" enabled="false" selected="true"/>
		</mx:FormItem>

		<mx:FormItem label="Groups:" enabled="{buddy.isGateway || !mBlogCheckbox.selected}">
			<mx:List id="list" width="250" labelField="data" rowCount="8" focusEnabled="false" alternatingItemColors="[#f3f3f3, #ffffff]" >
				<mx:itemRenderer>
					<mx:Component>
						<mx:CheckBox selectedField="selected" focusEnabled="false" change="data.selected = !data.selected"/>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:FormItem>

	</mx:Form>

	<mx:ControlBar/>

</popup:PopupWindowBase>
