<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.cleartext.ximpp.views.common.*"
	clipContent="false">
	<mx:Script>
		<![CDATA[
			import com.cleartext.ximpp.assets.Constants;
			import com.cleartext.ximpp.models.utils.LinkResult;
			import com.cleartext.ximpp.models.utils.LinkUitls;
			import com.cleartext.ximpp.models.valueObjects.UrlShortener;
			import com.cleartext.ximpp.models.DatabaseModel;
			import com.cleartext.ximpp.models.SettingsModel;
			import com.cleartext.ximpp.models.BuddyModel;
			import mx.events.FlexEvent;
			import com.cleartext.ximpp.events.SendButtonEvent;
			import com.cleartext.ximpp.events.CustomStatusEvent;
			import com.cleartext.ximpp.models.valueObjects.Status;
			import com.cleartext.ximpp.models.valueObjects.Message;
			import com.cleartext.ximpp.models.XMPPModel;
			import com.cleartext.ximpp.models.valueObjects.Buddy;
			
			public var messageCanvas:MessageCanvas;
			
			private static const CORNER_RADIUS:Number = 5;
			
			[Bindable]
			public var buddy:Buddy;
			
			[Bindable]
			public var shortening:Boolean = false;
			
			[Autowire]
			[Bindable]
			public var xmpp:XMPPModel;
			
			[Autowire]
			[Bindable]
			public var settings:SettingsModel;
			
			[Autowire]
			[Bindable]
			public var database:DatabaseModel;
			
			private function input_keyDownHandler(event:KeyboardEvent):void
			{ 	
				event.stopPropagation();

				if(event.keyCode==Keyboard.ENTER)
				{
					// if some muppet decides to carry on pressing the enter key
					// they will start sending blank messages, the inputTextArea.text
					// length will be 0 becaues the enter hasn't yet been appended to
					// the text. Use call later to allow the enter to be appended, then
					// force a reset.
					if(inputTextArea.text.length == 0)
						callLater(inputTextArea.reset, [true, false]);
					else
						send();
				}
				else
				{
					dispatchEvent(event);
				}
			}
			
			[Mediate(event="SendButtonEvent.SEND_CLICKED")]
			public function send_clickHandler(event:SendButtonEvent):void
			{
				inputTextArea.setFocus();
				send();
			}
			
			private function send():void
			{
				if(inputTextArea.text.length != 0)
				{
					messageCanvas.sendMessage(inputTextArea.text);
					callLater(inputTextArea.reset, [true, false]);
				}
			}
			
			[Mediate(event="CustomStatusEvent.CUSTOM_STATUS_CHANGE")]
			public function setInputField(event:CustomStatusEvent):void
			{
				inputTextArea.text = event.customStatus;

				if(inputTextArea.enabled)
					inputTextArea.setFocus();
			}

			private function shorten(str:String=" "):void
			{
				if(!buddy.microBlogging || !shortenUrls.selected || shortening || (str.length==1 && str != " "))
					return;
				
				var results:Array = LinkUitls.findLinks(LinkUitls.escapeHTML(inputTextArea.text + str));
				for each(var lr:LinkResult in results)
				{
					if(lr.validLink.indexOf("http://" + settings.global.urlShortener) != 0)
					{
						shortening = true;
						var shortener:UrlShortener = new UrlShortener();
						shortener.shorten(lr.validLink, settings.global.urlShortener, 
							function(shortURL:String):void
							{
								if(!shortening)
									return;

								shortening = false;
 								inputTextArea.text = inputTextArea.text.substr(0, lr.index) + shortURL + inputTextArea.text.substr(lr.index + lr.originalLink.length);
								var lengthChange:int = shortURL.length - lr.originalLink.length;
								inputTextArea.setSelection(inputTextArea.selectionBeginIndex+lengthChange, inputTextArea.selectionEndIndex+lengthChange);
								shorten();
							});
						return;
					}
				}
			}
			
			private function shortenURLsClickHandler():void
			{
				settings.global.autoShortenUrls = shortenUrls.selected;
				database.saveGlobalSettings();
				
				if(shortenUrls.selected)
					shorten();
				else
					// cancel any shortening that has started
					shortening = false;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				var g:Graphics = graphics;
				
				g.clear();
				
				g.beginFill(0xffffff);
				g.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, CORNER_RADIUS, CORNER_RADIUS);
				
				g.beginFill(0xebebeb);
				g.drawRoundRect(0, 0, unscaledWidth, Constants.TOP_ROW_HEIGHT, CORNER_RADIUS, CORNER_RADIUS);
				
				g.beginFill(0xffffff);
				g.drawRect(0, Constants.TOP_ROW_HEIGHT/2, unscaledWidth, Constants.TOP_ROW_HEIGHT/2);
				
				g.endFill();

				g.lineStyle(1, 0xefebe8);
				g.moveTo(0, Constants.TOP_ROW_HEIGHT);
				g.lineTo(unscaledWidth, Constants.TOP_ROW_HEIGHT);
				
				g.lineStyle(1, 0xffffff);
				g.drawRoundRect(0, 0, unscaledWidth, unscaledHeight, CORNER_RADIUS, CORNER_RADIUS);
			}
			
		]]>
	</mx:Script>
	
	<common:StatusIcon
		visible="{!(buddy == Buddy.ALL_MICRO_BLOGGING_BUDDY || buddy.isTyping)}"
		statusString="{buddy.status.value}" 
		x="10" y="6"/>
	
	<mx:Image 
		source="{Constants.IsTyping}" 
		x="10" y="6" 
		visible="{buddy.isTyping}"/>
	
	<mx:Label 
		text="{buddy.nickName}" 
		x="28" y="6" 
		styleName="blackBold"/>
	
	<mx:Label
		text="shortening.." 
		right="266" y="6" 
		styleName="dGreyNormal" 
		visible="{shortening}"/>

	<mx:VRule right="258" height="17" y="4" visible="{buddy.microBlogging}"/>		

	<mx:CheckBox 
		label="auto-shorten urls" 
		id="shortenUrls" 
		y="11" right="130"
		selected="{settings.global.autoShortenUrls}"
		click="shortenURLsClickHandler()"
		paddingTop="-8" 
		visible="{buddy.microBlogging}"/>
		
	<mx:VRule right="122" height="17" y="4" visible="{buddy.microBlogging}"/>		

	<mx:Label
		text="{inputTextArea.text.length + ' Characters'}" 
		right="10" y="6" 
		styleName="{(inputTextArea.text.length > 140) ? 'redBold' : 'dGreyNormal'}" 
		visible="{buddy.microBlogging}"/>

	<common:DefaultTextInput
		id="inputTextArea"
		defaultText="type message here..."
		width="100%" bottom="0" top="{Constants.TOP_ROW_HEIGHT}" 
		keyDown="input_keyDownHandler(event)"
		enabled="{!(!buddy || !xmpp.connected)}"
		focusRoundedCorners="bl br" 
		cornerRadius="{CORNER_RADIUS}"
		textInput="shorten(event.text)" 
		paddingRight="20"
		paddingLeft="10"
		paddingBottom="3"
		paddingTop="3"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		backgroundAlpha="0"
		wordWrap="true"
		borderStyle="none"
		focusAlpha="0.5" />

</mx:Canvas>
